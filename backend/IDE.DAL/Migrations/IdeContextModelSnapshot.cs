// <auto-generated />
using System;
using IDE.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IDE.DAL.Migrations
{
    [DbContext(typeof(IdeContext))]
    partial class IdeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IDE.DAL.Entities.Build", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("BuildFinished");

                    b.Property<string>("BuildMessage");

                    b.Property<DateTime>("BuildStarted");

                    b.Property<int>("BuildStatus");

                    b.Property<int>("Id");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Builds");
                });

            modelBuilder.Entity("IDE.DAL.Entities.FileHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("UpdaredBy");

                    b.Property<DateTime>("UpdatedAt");

                    b.Property<int?>("UpdaterId");

                    b.HasKey("Id");

                    b.HasIndex("UpdaterId");

                    b.ToTable("FileHistories");
                });

            modelBuilder.Entity("IDE.DAL.Entities.Files", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreateAt");

                    b.Property<int>("FIleHistoryId");

                    b.Property<string>("Folder");

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("FIleHistoryId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IDE.DAL.Entities.GitCredential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("Provider");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("GitCredentials");
                });

            modelBuilder.Entity("IDE.DAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("IDE.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessModifier");

                    b.Property<int>("AuthorId");

                    b.Property<int>("CompilerType");

                    b.Property<int>("CountOfBuildAttempts");

                    b.Property<int>("CountOfSaveBuilds");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("GitCredentialId");

                    b.Property<int>("Language");

                    b.Property<string>("LogoId");

                    b.Property<int?>("LogoId1");

                    b.Property<string>("Name");

                    b.Property<string>("ProjectLink");

                    b.Property<int>("ProjectType");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GitCredentialId");

                    b.HasIndex("LogoId1");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("IDE.DAL.Entities.ProjectMember", b =>
                {
                    b.Property<int>("ProjectId");

                    b.Property<int>("UserId");

                    b.Property<int>("Id");

                    b.Property<int>("UserAccess");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("IDE.DAL.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Expires");

                    b.Property<string>("Token");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("IDE.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AvatarId");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("GitHubUrl");

                    b.Property<DateTime>("LastActive");

                    b.Property<string>("LastName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<DateTime>("RegisteredAt");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("IDE.DAL.Entities.Build", b =>
                {
                    b.HasOne("IDE.DAL.Entities.Project", "Project")
                        .WithMany("Builds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDE.DAL.Entities.User", "User")
                        .WithMany("Builds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDE.DAL.Entities.FileHistories", b =>
                {
                    b.HasOne("IDE.DAL.Entities.User", "Updater")
                        .WithMany()
                        .HasForeignKey("UpdaterId");
                });

            modelBuilder.Entity("IDE.DAL.Entities.Files", b =>
                {
                    b.HasOne("IDE.DAL.Entities.FileHistories", "FileHistory")
                        .WithMany()
                        .HasForeignKey("FIleHistoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDE.DAL.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDE.DAL.Entities.Project", b =>
                {
                    b.HasOne("IDE.DAL.Entities.User", "Author")
                        .WithMany("Projects")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDE.DAL.Entities.GitCredential", "GitCredential")
                        .WithMany()
                        .HasForeignKey("GitCredentialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDE.DAL.Entities.Image", "Logo")
                        .WithMany()
                        .HasForeignKey("LogoId1");
                });

            modelBuilder.Entity("IDE.DAL.Entities.ProjectMember", b =>
                {
                    b.HasOne("IDE.DAL.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IDE.DAL.Entities.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDE.DAL.Entities.RefreshToken", b =>
                {
                    b.HasOne("IDE.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IDE.DAL.Entities.User", b =>
                {
                    b.HasOne("IDE.DAL.Entities.Image", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");
                });
#pragma warning restore 612, 618
        }
    }
}
